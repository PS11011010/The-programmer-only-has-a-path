import { wordSeparator, emptySeparator } from "./common"

/**
 * Дана строка со словами. Каждое слово написано задом наперед, но порядок слов верный.
 * Нет знаков препинания: только буквы и пробелы. Восстановить строку до нормального состояния.
 * https://t.me/c/1533281926/23
 * @param text 
 * @returns
 * @author PS11011010
 * @description Текст - это массив символов. К нему можно обращаться по индексу, например.
 * Если один вид данных подобен (или как в нашем случае - наследован) другому, их можно преобразовывать.
 * Строка преобразуется в массив подстрок методом split. Разделитель, по которому определяются границы - проблел.
 * Наши условия близки к идеальным, поэтому только пробел разделяет слова. Выходит, что каждая
 * полченная подстрока - это слово. Его мы тоже разбиваем на массив подстрок, но теперь уже по одному символу.
 * Далее переворачиваем массив методом reverse и склеиваем обратно все символы в строку.
 * Так мы развернули символы в каждом слове. Осталось склеить слова через проблел назад.
 */
const reversedWordsInText: (test: string) => string = (text) => {
    return text
        .split(wordSeparator)
        .map((part) => part.split(emptySeparator).reverse().join(emptySeparator))
        .join(wordSeparator)
}

export {
    reversedWordsInText
}
